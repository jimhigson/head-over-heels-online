import{s as W,a as P,b as L,c as C,e as V,f as k,g as v,h as u,j as E,k as O,x as F,l as g,m as x,n as H,r as X,p as A,q,t as T,u as Y,w as Z,y as I,z as K,A as N,B as G,C as w,D as Q,E as U,F as _,H as M,I as J,J as j,K as tt,L as it,M as z}from"./App-GwNL2HV_.js";const et=1e3/25,$=t=>{const i=W.animations[t],o=i.length,{animationSpeed:e}=i;return o*et/e};$("bubbles.white");const ot=$("head.fadeOut"),st=({touchedItem:t,room:i,gameState:o})=>{P({room:i,item:t});const e=L({itemType:"bubbles",config:{style:"white",was:t.type==="pickup"?{type:"pickup",gives:t.config.gives}:t.type==="hushPuppy"?{type:"hushPuppy"}:{type:"disappearing"}},position:C,room:i,gameState:o}),s=V(t);e.state.position=k(s,v(e.aabb,.5)),e.state.expires=i.roomTime+ot},nt=(t,i)=>{const o=u(t.items).filter(E("hushPuppy"));for(const e of o)st({touchedItem:e,gameState:i,room:t})},at=.5,S=(t,i,o,e)=>{const s=o.x+e.x-t.x,r=o.y+e.y-t.y,d=o.z+e.z-t.z,p=t.x+i.x-o.x,f=t.y+i.y-o.y,m=t.z+i.z-o.z,l=Math.abs(s)<Math.abs(p)?s:-p,y=Math.abs(r)<Math.abs(f)?r:-f,n=Math.abs(d)<Math.abs(m)?d:-m,a=Math.abs(l),c=Math.abs(y),h=Math.abs(n)*at;return a<c&&a<h?{x:l,y:0,z:0}:c<h?{x:0,y,z:0}:{x:0,y:0,z:n}},D=(t,i)=>({x:t.x>0?i.state.position.x:i.state.position.x+i.aabb.x,y:t.y>0?i.state.position.y:i.state.position.y+i.aabb.y,z:t.z>0?i.state.position.z:i.state.position.z+i.aabb.z}),R={stopAutowalk:5,portal:5,wall:5,doorLegs:5,sceneryPlayer:5,bubbles:5,switch:10,doorFrame:15,ball:18,block:20,barrier:20,floor:20,floorEdge:20,hushPuppy:20,teleporter:20,lift:30,movingPlatform:30,pushableBlock:30,portableBlock:30,sceneryCrown:30,slidingBlock:30,spring:30,joystick:40,charles:40,conveyor:40,head:50,heels:50,headOverHeels:50,pickup:80,firedDoughnut:90,spikes:98,slidingDeadly:100,moveableDeadly:100,deadlyBlock:100,monster:100,floatingText:200,emitter:200},rt=(t,i)=>R[t.type]-R[i.type],dt=(t,i)=>i.toSorted((o,e)=>{const s=rt(o,e);if(s!==0)return s;const r=O(t,D(t,o)),d=O(t,D(t,e));return Math.abs(r-d)<1e-4?o.id<e.id?-1:1:r-d}),B=({subjectItem:t,posDelta:i,gameState:o,room:e,pusher:s,deltaMS:r,forceful:d=E("lift")(t)&&s===void 0,recursionDepth:p=0,onTouch:f})=>{if(F(i,C))return;const{state:{position:m}}=t;if(t.state.position=g(m,i),x(t)){const{actedOnAt:n}=t.state;n.roomTime===e.roomTime?s&&(n.by[s.id]=!0):(n.by=s?{[s.id]:!0}:{},n.roomTime=e.roomTime)}const l=dt(i,H(t,X(e.items)));let y=!1;for(const n of l){if(!A(t,n))continue;if(x(t)){const{collidedWith:h}=t.state;h.roomTime===e.roomTime?s&&(h.by[n.id]=!0):(h.by={[n.id]:!0},h.roomTime=e.roomTime)}const a=q(n);if(s!==n&&!(y&&a)&&f!==void 0&&(f({movingItem:t,touchedItem:n,movementVector:k(t.state.position,m),gameState:o,deltaMS:r,room:e}),y=y||a),e.items[t.id]===void 0)return;if(e.items[n.id]===void 0||!T(n,t)||!T(t))continue;const c=S(t.state.position,t.aabb,n.state.position,n.aabb);if(Y(t,n,d)&&n!==s){const h=d||G(n)?-1:-.5,b=v(c,h);if(t.state.position=g(t.state.position,c,b),p<Z&&B({subjectItem:n,posDelta:b,pusher:t,gameState:o,room:e,deltaMS:r,forceful:d,recursionDepth:p+1,onTouch:f}),e.items[n.id]===void 0)continue;t.state.position=g(t.state.position,S(t.state.position,t.aabb,n.state.position,n.aabb))}else t.state.position=g(t.state.position,c);x(t)&&c.z>0&&(t.state.standingOnItemId===null||!l.includes(I(t.state.standingOnItemId,e)))&&(K(t,e),N({above:t,below:n}))}},lt=(t,i,{changeType:o,sourceItem:e})=>{switch(o){case"portal":return u(t.items).find(s=>z(s)&&s.config.toRoom===i.id&&F(v(e.config.direction,-1),s.config.direction));case"level-select":return u(t.items).find(s=>z(s)&&s.config.toRoom===i.id&&s.config.direction.z===0)??u(t.items).find(s=>z(s)&&s.config.direction.z===0)??u(t.items).find(s=>z(s)&&s.config.direction.z>0)??u(t.items).find(z)}},ct=(t,i,o,e)=>{const s=1*J.w;t.state.position=g(t.state.position,v(i,s));for(let r=0;r<s;r++)B({subjectItem:t,posDelta:v(i,-1),gameState:o,room:e,deltaMS:16,forceful:!0,onTouch:void 0})},ft=t=>{const{playableItem:i,gameState:o,toRoomId:e,changeType:s,sourceItem:r}=t,d=o.characterRooms[i.id];if(d===void 0)throw new Error(`${i.id} is not in a room on the gameState`);if(e===d.id)throw new Error(`Can't move ${i.id} to the same room "${e}""`);let p;switch(s){case"portal":{const{config:{relativePoint:a},state:{position:c}}=r;p=k(i.state.position,g(c,a));break}case"teleport":{const{state:{position:a}}=r;p=k(i.state.position,a);break}case"level-select":p={x:0,y:0,z:0};break;default:throw new Error}const f=i.type==="headOverHeels"?void 0:o.characterRooms[w(i.id)],m=o.campaign.rooms[e];if(m===void 0)throw new Error(`room ${e} does not exist in campaign`);const l=f?.id===e?f:Q({roomJson:m,roomPickupsCollected:o.pickupsCollected[e]??U});P({room:d,item:i});const y=_(i);if(y!==void 0&&(y.carrying=null),i.state.latentMovement=[],(i.type==="head"||i.type==="headOverHeels")&&nt(l,o),P({room:l,item:i}),l.items[i.id]=i,o.characterRooms[i.id]=l,t.changeType==="teleport"){const{config:{toPosition:a}}=t.sourceItem;i.state.position=g(M(a),p)}else{const a=lt(l,d,t);if(console.log("putting",i.id,"into",e,"at portal",a,"because",s,"sourceportal",r),a===void 0)if(t.changeType==="level-select")i.state.position=M({x:1,y:1,z:8});else throw new Error(`trying to move ${i.id} from ${d.id} --to-> ${e} but no destination portal found to locate with`);else{i.state.position=g(a.state.position,a.config.relativePoint,p,s==="portal"&&r.config.direction.z>0?{z:J.h}:{});const{config:{direction:c}}=a;c.z===0&&(i.state.autoWalk=!0,i.state.facing=v(c,-1),i.state.action==="idle"&&(i.state.action="moving"),ct(i,c,o,l))}}const n=H(i,X(l.items));n.length>0&&console.warn("on entering room",e,"character",i.id,"at",i.state.position,"collides with",n),o.entryState[i.id]=j(i),i.id==="headOverHeels"?(delete o.entryState.head,delete o.entryState.heels):(o.entryState[w(i.id)]||(o.entryState[w(i.id)]=o.entryState.headOverHeels),delete o.entryState.headOverHeels),tt.dispatch(it(e))};export{rt as a,B as b,ft as c,st as d,ot as f,S as m,et as o,nt as r};
