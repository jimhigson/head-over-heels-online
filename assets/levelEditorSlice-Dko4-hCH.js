import{ae as z,af as D,c as v,e as x,N as A,ag as g,R as k,ah as P,f as $,ai as F,aj as L,ak as O}from"./App-DqQPO1Yu.js";import"./index-C09UEIjB.js";const U={jail:["bars"],blacktooth:["plain","plain","armour","shield","shield","armour"],bookworld:["book","book","cowboy"],egyptus:["hieroglyphics","hieroglyphics","hieroglyphics","sarcophagus","sarcophagus"],market:["passage","more-fruits","more-fruits","more-fruits","fruits"],moonbase:["coil","window1","window2","window3"],penitentiary:["loop","loop","skeleton"],safari:["wall","shield","wall","window","window","wall","shield"]},X=(o,e)=>{const t=U[o];return t[e%t.length]},h=(o,e)=>new Array(e).fill(0).map((t,s)=>X(o,s)),j={awayWall:{type:"wall",config:{direction:"away",times:{x:8},tiles:h("blacktooth",8)},position:{x:0,y:8,z:0}},leftWall:{type:"wall",config:{direction:"left",times:{y:8},tiles:h("blacktooth",8)},position:{x:8,y:0,z:0}},towardsWall:{type:"wall",config:{direction:"towards",times:{x:8}},position:{x:0,y:0,z:0}},rightWall:{type:"wall",config:{direction:"right",times:{y:8}},position:{x:0,y:0,z:0}}},J={planet:"blacktooth",color:{hue:"cyan",shade:"basic"},floor:"blacktooth",items:{...j},size:{x:8,y:8}},p=o=>o.campaignInProgress.rooms[o.currentlyEditingRoomId];function*M(o,e,t){for(const s of D(o)){const[r,l]=s;if(l.type!=="wall"){yield s;continue}if(l.config.direction!==e){yield s;continue}const{position:u,config:a}=l,d={x:1,y:1,...a.times},i=v(x(a.direction)),y=x(a.direction),c=A(t,u);if(c[y]!==0){yield s;continue}if(c[i]<-1){yield s;continue}if(c[i]>d[i]){yield s;continue}if(d[i]===2)continue;c[i]===0&&(yield[r,g(l,m=>{m.position=k(u,{[i]:2});const n=m.config;n.times={[i]:d[i]-2},n.tiles&&(n.tiles=n.tiles.slice(2))})]),c[i]===d[i]-2&&(yield[r,g(l,m=>{const n=m.config;n.times={[i]:d[i]-2},n.tiles&&(n.tiles=n.tiles.slice(0,n.tiles.length-2))})]),yield[`${r}/beforeDoor`,g(l,m=>{const n=m.config;n.times={[i]:c[i]},n.tiles&&(n.tiles=n.tiles.slice(0,c[i]))})],yield[`${r}/afterDoor`,g(l,m=>{m.position={...u,[i]:t[i]+2};const n=m.config;n.times={[i]:d[i]-c[i]-2},n.tiles&&(n.tiles=n.tiles.slice(c[i]+2))})]}}const S=(o,e,t)=>{o.items=z(M(o.items,e,t))},I=o=>{const e=structuredClone(P(p(o))),{history:t}=o;t.redo=[],t.undo.push(e)},H={undo(o){const e=o,{campaignInProgress:t,history:{undo:s,redo:r},currentlyEditingRoomId:l}=e;s.length!==0&&(r.push(t.rooms[l]),t.rooms[l]=s.pop())},redo(o){const e=o,{campaignInProgress:t,history:{redo:s,undo:r},currentlyEditingRoomId:l}=e;s.length!==0&&(r.push(t.rooms[l]),t.rooms[l]=s.pop())}},_={selectCanUndo:o=>o.history.undo.length>0,selectCanRedo:o=>o.history.redo.length>0},T=(o,e)=>{o.planet=e,$.includes(o.floor)&&(o.floor=e);for(const t of Object.values(o.items))t.type==="wall"&&(t.config.direction==="away"||t.config.direction==="left")&&(t.config.tiles=h(e,t.config.tiles.length))},b=(o,e)=>`${e}#${o.nextItemId++}`,C=(o,e,t,s)=>{const r=b(o,e),l=p(o);o.nextItemId++,l.items[r]={type:e,config:t,position:s}},q=o=>o.type==="door",B={applyToolToRoomJson(o,{payload:{blockPosition:e,pointedAtItem:t}}){const s=o,{tool:r}=s;switch(r?.type){case"item":{const l=r.item;if(q(l)&&t.type==="wall"){I(s);const u=p(s),a=t.config.direction;S(u,a,e);const d=`room#${s.nextRoomId++}`;console.log(d,"toRoomId"),C(s,l.type,{...r.item.config,toRoom:d,direction:a},e);const i={id:d,...structuredClone(J),color:u.color};T(i,u.planet),s.campaignInProgress.rooms[d]=i;const y=b(s,"door"),c={x:a==="left"?0:a==="right"?i.size.x:Math.floor(i.size.x/2),y:a==="away"?0:a==="towards"?i.size.x:Math.floor(i.size.x/2),z:e.z},f=F(a),w={type:"door",config:{toRoom:u.id,direction:f},position:c};i.items[y]=w,S(i,f,c)}else I(s),C(s,r.item.type,r.item.config,e);s.selectedJsonItemIds=[];break}}}},R="room#0",G={...structuredClone(J),id:R},E={campaignInProgress:{name:"new campaign",rooms:{[R]:G}},nextRoomId:1,nextItemId:0,currentlyEditingRoomId:R,tool:{type:"pointer"},selectedJsonItemIds:[],history:{undo:[],redo:[]}},W=L({name:"levelEditor",initialState:E,reducers:{setTool(o,{payload:e}){const t=o;t.tool=e},changeRoomColour(o,{payload:e}){const t=o,s=t.campaignInProgress.rooms[t.currentlyEditingRoomId].color;Object.assign(s,e)},changeRoomScenery(o,{payload:e}){const s=p(o);T(s,e)},changeToRoom(o,{payload:e}){const t=o;t.currentlyEditingRoomId=e,t.history=E.history},setSelectedItemInRoom(o,{payload:{jsonItemId:e,additive:t}}){if(t)if(e===void 0)o.selectedJsonItemIds=[];else{const s=o.selectedJsonItemIds.indexOf(e);s===-1?o.selectedJsonItemIds.push(e):o.selectedJsonItemIds.splice(s,1)}else o.selectedJsonItemIds=e===void 0?[]:[e]},deleteSelected(o){const e=o,t=p(e);I(e),e.selectedJsonItemIds.forEach(s=>{delete t.items[s]}),e.selectedJsonItemIds=[]},injected(){},...H,...B},selectors:{selectCurrentEditingRoomJson:p,selectCurrentEditingRoomColour:o=>p(o).color,selectCurrentEditingRoomScenery:o=>p(o).planet,selectTool:o=>o.tool,selectSelectedJsonItemIds:o=>o.selectedJsonItemIds,..._}}),{applyToolToRoomJson:Q,changeRoomColour:V,changeRoomScenery:Y,changeToRoom:Z,deleteSelected:oo,injected:eo,redo:to,setSelectedItemInRoom:so,setTool:io,undo:no}=W.actions,{selectCurrentEditingRoomJson:lo,selectTool:ro,selectCurrentEditingRoomColour:co,selectCurrentEditingRoomScenery:ao,selectSelectedJsonItemIds:mo,selectCanRedo:uo,selectCanUndo:po}=W.selectors,go=O.withTypes();export{Q as applyToolToRoomJson,V as changeRoomColour,Y as changeRoomScenery,Z as changeToRoom,oo as deleteSelected,E as initialLevelEditorSliceState,eo as injected,W as levelEditorSlice,to as redo,uo as selectCanRedo,po as selectCanUndo,co as selectCurrentEditingRoomColour,lo as selectCurrentEditingRoomJson,ao as selectCurrentEditingRoomScenery,mo as selectSelectedJsonItemIds,ro as selectTool,so as setSelectedItemInRoom,io as setTool,no as undo,go as useAppSelectorWithLevelEditorSlice};
