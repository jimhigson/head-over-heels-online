import{f as E,c as S,e as C,b as x,g as w,s as T,h as f,j as b,k as W,u as A,l as k}from"./App-WFwQ2e3R.js";import"./index-D63mWPlL.js";const v={jail:["bars"],blacktooth:["plain","plain","armour","shield","shield","armour"],bookworld:["book","book","cowboy"],egyptus:["hieroglyphics","hieroglyphics","hieroglyphics","sarcophagus","sarcophagus"],market:["passage","more-fruits","more-fruits","more-fruits","fruits"],moonbase:["coil","window1","window2","window3"],penitentiary:["loop","loop","skeleton"],safari:["wall","shield","wall","window","window","wall","shield"]},z=(o,e)=>{const i=v[o];return i[e%i.length]},y=(o,e)=>new Array(e).fill(0).map((i,t)=>z(o,t)),j={awayWall:{type:"wall",config:{direction:"away",times:{x:8},tiles:y("blacktooth",8)},position:{x:0,y:8,z:0}},leftWall:{type:"wall",config:{direction:"left",times:{y:8},tiles:y("blacktooth",8)},position:{x:8,y:0,z:0}},towardsWall:{type:"wall",config:{direction:"towards",times:{x:8}},position:{x:0,y:0,z:0}},rightWall:{type:"wall",config:{direction:"right",times:{y:8}},position:{x:0,y:0,z:0}}},D={planet:"blacktooth",color:{hue:"cyan",shade:"basic"},floor:"blacktooth",items:{...j},size:{x:8,y:8}},g=o=>o.campaignInProgress.rooms[o.currentlyEditingRoomId];function*J(o,e,i){for(const t of C(o)){const[l,r]=t;if(r.type!=="wall"){yield t;continue}if(r.config.direction!==e){yield t;continue}const{position:d,config:p}=r,m={x:1,y:1,...p.times},n=x(w(p.direction)),I=w(p.direction),c=T(i,d);if(c[I]!==0){yield t;continue}if(c[n]<-1){yield t;continue}if(c[n]>m[n]){yield t;continue}if(m[n]===2)continue;c[n]===0&&(yield[l,f(r,a=>{a.position=b(d,{[n]:2});const s=a.config;s.times={[n]:m[n]-2},s.tiles&&(s.tiles=s.tiles.slice(2))})]),c[n]===m[n]-2&&(yield[l,f(r,a=>{const s=a.config;s.times={[n]:m[n]-2},s.tiles&&(s.tiles=s.tiles.slice(0,s.tiles.length-2))})]),yield[`${l}/beforeDoor`,f(r,a=>{const s=a.config;s.times={[n]:c[n]},s.tiles&&(s.tiles=s.tiles.slice(0,c[n]))})],yield[`${l}/afterDoor`,f(r,a=>{a.position={...d,[n]:i[n]+2};const s=a.config;s.times={[n]:m[n]-c[n]-2},s.tiles&&(s.tiles=s.tiles.slice(c[n]+2))})]}}const P=(o,e,i)=>{const t=g(o);t.items=E(J(S(t.items),e,i))},h=(o,e,i,t)=>{const l=`item${e}#${o.nextItemId}`,r=g(o);o.nextItemId++,r.items[l]={type:e,config:i,position:t}},$=o=>o.type==="door",F={applyToolToRoomJson(o,{payload:{blockPosition:e,pointedAtItem:i}}){const t=o,{tool:l}=t;switch(l?.type){case"item":{const r=l.item;if($(r)&&i.type==="wall"){const d=i.config.direction;P(t,d,e),h(t,l.item.type,{...l.item.config,direction:d},e)}else h(t,l.item.type,l.item.config,e)}}}},u="untitledRoom",L={...D,id:u},X={campaignInProgress:{name:"new campaign",rooms:{[u]:L}},nextItemId:0,currentlyEditingRoomId:u,tool:{type:"pointer"}},R=W({name:"levelEditor",initialState:X,reducers:{setTool(o,{payload:e}){const i=o;i.tool=e},changeRoomColour(o,{payload:e}){const i=o,t=i.campaignInProgress.rooms[i.currentlyEditingRoomId].color;Object.assign(t,e)},changeRoomScenery(o,{payload:e}){const i=o,t=i.campaignInProgress.rooms[i.currentlyEditingRoomId];t.planet=e,k.includes(t.floor)&&(t.floor=e);for(const l of Object.values(t.items))l.type==="wall"&&(l.config.direction==="away"||l.config.direction==="left")&&(l.config.tiles=y(e,l.config.tiles.length))},...F,injected(){}},selectors:{selectCurrentEditingRoomJson:g,selectCurrentEditingRoomColour:o=>g(o).color,selectCurrentEditingRoomScenery:o=>g(o).planet,selectTool:o=>o.tool}}),{applyToolToRoomJson:B,changeRoomColour:G,changeRoomScenery:K,injected:M,setTool:Q}=R.actions,{selectCurrentEditingRoomJson:U,selectTool:V,selectCurrentEditingRoomColour:Y,selectCurrentEditingRoomScenery:Z}=R.selectors,N=A.withTypes();export{B as applyToolToRoomJson,G as changeRoomColour,K as changeRoomScenery,X as initialLevelEditorSliceState,M as injected,R as levelEditorSlice,Y as selectCurrentEditingRoomColour,U as selectCurrentEditingRoomJson,Z as selectCurrentEditingRoomScenery,V as selectTool,Q as setTool,N as useAppSelectorWithLevelEditorSlice};
