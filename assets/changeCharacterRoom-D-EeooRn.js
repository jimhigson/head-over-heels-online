import{k as W,l as M,n as A,q as C,r as L,t as x,w as u,x as v,y as X,A as E,C as m,E as k,F as N,H as F,I as H,J as V,K as Y,L as b,M as Z,N as q,O as B,P as I,Q as K,R as Q,S as U,T as _,U as T,W as G,X as P,Y as j,Z as tt,_ as R,$,a0 as ot,a1 as it,a2 as et,a3 as z}from"./App-C4EBkp40.js";const st=1e3/25,D=t=>{const o=W.animations[t],e=o.length,{animationSpeed:i}=o;return e*st/i};D("bubbles.white");const at=D("head.fadeOut"),nt=({touchedItem:t,room:o,gameState:e})=>{M({room:o,item:t});const i=A({itemType:"bubbles",config:{style:"white",was:t.type==="pickup"?{type:"pickup",gives:t.config.gives}:t.type==="hushPuppy"?{type:"hushPuppy"}:{type:"disappearing"}},position:C,room:o,gameState:e}),s=L(t);i.state.position=x(s,u(i.aabb,.5)),i.state.expires=o.roomTime+at},rt=(t,o)=>{const e=v(t.items).filter(X("hushPuppy"));for(const i of e)nt({touchedItem:i,gameState:o,room:t})},dt=.5,S=(t,o,e,i)=>{const s=e.x+i.x-t.x,r=e.y+i.y-t.y,l=e.z+i.z-t.z,p=t.x+o.x-e.x,f=t.y+o.y-e.y,h=t.z+o.z-e.z,d=Math.abs(s)<Math.abs(p)?s:-p,y=Math.abs(r)<Math.abs(f)?r:-f,a=Math.abs(l)<Math.abs(h)?l:-h,n=Math.abs(d),c=Math.abs(y),w=Math.abs(a)*dt;return n<c&&n<w?{x:d,y:0,z:0}:c<w?{x:0,y,z:0}:{x:0,y:0,z:a}},J=({subjectItem:t,posDelta:o,gameState:e,room:i,pusher:s,deltaMS:r,forceful:l=X("lift")(t)&&s===void 0,recursionDepth:p=0,onTouch:f})=>{if(E(o,C))return;const{state:{position:h}}=t;if(t.state.position=m(h,o),k(t)){const{actedOnAt:a}=t.state;a.roomTime===i.roomTime?s&&(a.by[s.id]=!0):(a.by=s?{[s.id]:!0}:{},a.roomTime=i.roomTime)}const d=N(o,F(t,H(i.items)));let y=!1;for(const a of d){if(!V(t,a))continue;const n=Y(a);if(s!==a&&!(y&&n)&&f!==void 0&&(f({movingItem:t,touchedItem:a,movementVector:x(t.state.position,h),gameState:e,deltaMS:r,room:i}),y=y||n),i.items[t.id]===void 0)return;if(i.items[a.id]===void 0||!b(a,t)||!b(t))continue;const c=S(t.state.position,t.aabb,a.state.position,a.aabb),w=Z(q(S(h,t.aabb,a.state.position,a.aabb)),0);if(B(t,a,l)&&a!==s){const g=l||_(a)?-1:-.5,O=u(c,g);if(t.state.position=m(t.state.position,c,O),p<I&&J({subjectItem:a,posDelta:O,pusher:t,gameState:e,room:i,deltaMS:r,forceful:l,recursionDepth:p+1,onTouch:f}),i.items[a.id]===void 0)continue;t.state.position=m(t.state.position,S(t.state.position,t.aabb,a.state.position,a.aabb))}else t.state.position=m(t.state.position,c);if(k(t)&&c.z>0&&(t.state.standingOnItemId===null||!d.includes(K(t.state.standingOnItemId,i)))&&(Q(t,i),U({above:t,below:a})),k(t)&&!w){const{collidedWith:g}=t.state;g.roomTime===i.roomTime?s&&(g.by[a.id]=!0):(g.by={[a.id]:!0},g.roomTime=i.roomTime)}}},ct=(t,o,{changeType:e,sourceItem:i})=>{switch(e){case"portal":return v(t.items).find(s=>z(s)&&s.config.toRoom===o.id&&E(u(i.config.direction,-1),s.config.direction));case"level-select":return v(t.items).find(s=>z(s)&&s.config.toRoom===o.id&&s.config.direction.z===0)??v(t.items).find(s=>z(s)&&s.config.direction.z===0)??v(t.items).find(s=>z(s)&&s.config.direction.z>0)??v(t.items).find(z)}},lt=(t,o,e,i)=>{const s=1*$.w;t.state.position=m(t.state.position,u(o,s));for(let r=0;r<s;r++)J({subjectItem:t,posDelta:u(o,-1),gameState:e,room:i,deltaMS:16,forceful:!0,onTouch:void 0})},ft=t=>{const{playableItem:o,gameState:e,toRoomId:i,changeType:s,sourceItem:r}=t,l=e.characterRooms[o.id];if(l===void 0)throw new Error(`${o.id} is not in a room on the gameState`);if(i===l.id)throw new Error(`Can't move ${o.id} to the same room "${i}""`);let p;switch(s){case"portal":{const{config:{relativePoint:n},state:{position:c}}=r;p=x(o.state.position,m(c,n));break}case"teleport":{const{state:{position:n}}=r;p=x(o.state.position,n);break}case"level-select":p={x:0,y:0,z:0};break;default:throw new Error}const f=o.type==="headOverHeels"?void 0:e.characterRooms[T(o.id)],h=e.campaign.rooms[i];if(h===void 0)throw new Error(`room ${i} does not exist in campaign`);const d=f?.id===i?f:G({roomJson:h,roomPickupsCollected:e.pickupsCollected[i]??j,scrollsRead:P.getState().gameMenus.scrollsRead});M({room:l,item:o});const y=tt(o);if(y!==void 0&&(y.carrying=null),o.state.latentMovement=[],(o.type==="head"||o.type==="headOverHeels")&&rt(d,e),M({room:d,item:o}),d.items[o.id]=o,e.characterRooms[o.id]=d,t.changeType==="teleport"){const{config:{toPosition:n}}=t.sourceItem;o.state.position=m(R(n),p)}else{const n=ct(d,l,t);if(console.log("putting",o.id,"into",i,"at portal",n,"because",s,"sourceportal",r),n===void 0)if(t.changeType==="level-select")o.state.position=R({x:1,y:1,z:8});else throw new Error(`trying to move ${o.id} from ${l.id} --to-> ${i} but no destination portal found to locate with`);else{o.state.position=m(n.state.position,n.config.relativePoint,p,s==="portal"&&r.config.direction.z>0?{z:$.h}:{});const{config:{direction:c}}=n;c.z===0&&(o.state.autoWalk=!0,o.state.facing=u(c,-1),o.state.action==="idle"&&(o.state.action="moving"),lt(o,c,e,d))}}const a=F(o,H(d.items));a.length>0&&console.warn("on entering room",i,"character",o.id,"at",o.state.position,"collides with",a),e.entryState[o.id]=ot(o),o.id==="headOverHeels"?(delete e.entryState.head,delete e.entryState.heels):(e.entryState[T(o.id)]||(e.entryState[T(o.id)]=e.entryState.headOverHeels),delete e.entryState.headOverHeels),P.dispatch(it(i)),P.dispatch(et({characterName:o.type,roomId:i}))};export{J as a,nt as b,ft as c,at as f,S as m,st as o,rt as r};
