import{s as W,a as P,b as L,c as E,e as m,f as u,g as k,h as v,j as F,k as O,x as H,l as x,m as C,r as X,n as V,p as A,q as T,t as q,u as Y,w as Z,y as K,z as N,A as G,B as w,C as I,D as Q,E as U,F as S,H as J,I as _,J as j,K as tt,L as z}from"./App-CaChzViv.js";const it=1e3/25,$=t=>{const i=W.animations[t],e=i.length,{animationSpeed:o}=i;return e*it/o};$("bubbles.white");const ot=$("head.fadeOut"),et=({touchedItem:t,room:i,gameState:e})=>{P({room:i,item:t});const o=L({itemType:"bubbles",config:{style:"white",was:t.type==="pickup"?{type:"pickup",gives:t.config.gives}:{type:"disappearing"}},position:E,room:i,gameState:e}),s=m(t.state.position,u(t.aabb,.5));o.state.position=k(s,u(o.aabb,.5)),o.state.expires=i.roomTime+ot},st=(t,i)=>{const e=v(t.items).filter(F("hushPuppy"));for(const o of e)et({touchedItem:o,gameState:i,room:t})},nt=.5,M=(t,i,e,o)=>{const s=e.x+o.x-t.x,r=e.y+o.y-t.y,d=e.z+o.z-t.z,p=t.x+i.x-e.x,f=t.y+i.y-e.y,g=t.z+i.z-e.z,l=Math.abs(s)<Math.abs(p)?s:-p,y=Math.abs(r)<Math.abs(f)?r:-f,n=Math.abs(d)<Math.abs(g)?d:-g,a=Math.abs(l),c=Math.abs(y),h=Math.abs(n)*nt;return a<c&&a<h?{x:l,y:0,z:0}:c<h?{x:0,y,z:0}:{x:0,y:0,z:n}},D=(t,i)=>({x:t.x>0?i.state.position.x:i.state.position.x+i.aabb.x,y:t.y>0?i.state.position.y:i.state.position.y+i.aabb.y,z:t.z>0?i.state.position.z:i.state.position.z+i.aabb.z}),R={stopAutowalk:5,portal:5,wall:5,doorLegs:5,sceneryPlayer:5,bubbles:5,switch:10,doorFrame:15,ball:18,block:20,barrier:20,floor:20,floorEdge:20,hushPuppy:20,teleporter:20,lift:30,movingPlatform:30,pushableBlock:30,portableBlock:30,slidingBlock:30,spring:30,joystick:40,charles:40,conveyor:40,head:50,heels:50,headOverHeels:50,pickup:80,firedDoughnut:90,spikes:98,slidingDeadly:100,moveableDeadly:100,deadlyBlock:100,monster:100},at=(t,i)=>R[t.type]-R[i.type],rt=(t,i)=>i.toSorted((e,o)=>{const s=at(e,o);if(s!==0)return s;const r=O(t,D(t,e)),d=O(t,D(t,o));return Math.abs(r-d)<1e-4?e.id<o.id?-1:1:r-d}),B=({subjectItem:t,posDelta:i,gameState:e,room:o,pusher:s,deltaMS:r,forceful:d=F("lift")(t)&&s===void 0,recursionDepth:p=0,onTouch:f})=>{if(H(i,E))return;const{state:{position:g}}=t;if(t.state.position=m(g,i),x(t)){const{actedOnAt:n}=t.state;n.roomTime===o.roomTime?s&&(n.by[s.id]=!0):(n.by=s?{[s.id]:!0}:{},n.roomTime=o.roomTime)}const l=rt(i,C(t,X(o.items)));let y=!1;for(const n of l){if(!V(t,n))continue;if(x(t)){const{collidedWith:h}=t.state;h.roomTime===o.roomTime?s&&(h.by[n.id]=!0):(h.by={[n.id]:!0},h.roomTime=o.roomTime)}const a=A(n);if(s!==n&&!(y&&a)&&f!==void 0&&(f({movingItem:t,touchedItem:n,movementVector:k(t.state.position,g),gameState:e,deltaMS:r,room:o}),y=y||a),o.items[t.id]===void 0)return;if(o.items[n.id]===void 0||!T(n,t)||!T(t))continue;const c=M(t.state.position,t.aabb,n.state.position,n.aabb);if(q(t,n,d)&&n!==s){const h=d||G(n)?-1:-.5,b=u(c,h);if(t.state.position=m(t.state.position,c,b),p<Y&&B({subjectItem:n,posDelta:b,pusher:t,gameState:e,room:o,deltaMS:r,forceful:d,recursionDepth:p+1,onTouch:f}),o.items[n.id]===void 0)continue;t.state.position=m(t.state.position,M(t.state.position,t.aabb,n.state.position,n.aabb))}else t.state.position=m(t.state.position,c);x(t)&&c.z>0&&(t.state.standingOnItemId===null||!l.includes(Z(t.state.standingOnItemId,o)))&&(K(t,o),N({above:t,below:n}))}},dt=(t,i,{changeType:e,sourceItem:o})=>{switch(e){case"portal":return v(t.items).find(s=>z(s)&&s.config.toRoom===i.id&&H(u(o.config.direction,-1),s.config.direction));case"level-select":return v(t.items).find(s=>z(s)&&s.config.toRoom===i.id&&s.config.direction.z===0)??v(t.items).find(s=>z(s)&&s.config.direction.z===0)??v(t.items).find(s=>z(s)&&s.config.direction.z>0)??v(t.items).find(z)}},lt=(t,i,e,o)=>{const s=1*J.w;t.state.position=m(t.state.position,u(i,s));for(let r=0;r<s;r++)B({subjectItem:t,posDelta:u(i,-1),gameState:e,room:o,deltaMS:16,forceful:!0,onTouch:void 0})},pt=t=>{const{playableItem:i,gameState:e,toRoomId:o,changeType:s,sourceItem:r}=t,d=e.characterRooms[i.id];if(d===void 0)throw new Error(`${i.id} is not in a room on the gameState`);if(o===d.id)throw new Error(`Can't move ${i.id} to the same room "${o}""`);let p;switch(s){case"portal":{const{config:{relativePoint:a},state:{position:c}}=r;p=k(i.state.position,m(c,a));break}case"teleport":{const{state:{position:a}}=r;p=k(i.state.position,a);break}case"level-select":p={x:0,y:0,z:0};break;default:throw new Error}const f=i.type==="headOverHeels"?void 0:e.characterRooms[w(i.id)],g=e.campaign.rooms[o];if(g===void 0)throw new Error(`room ${o} does not exist in campaign`);const l=f?.id===o?f:I({roomJson:g,roomPickupsCollected:e.pickupsCollected[o]??Q});P({room:d,item:i});const y=U(i);if(y!==void 0&&(y.carrying=null),i.state.latentMovement=[],(i.type==="head"||i.type==="headOverHeels")&&st(l,e),P({room:l,item:i}),l.items[i.id]=i,e.characterRooms[i.id]=l,t.changeType==="teleport"){const{config:{toPosition:a}}=t.sourceItem;i.state.position=m(S(a),p)}else{const a=dt(l,d,t);if(console.log("putting",i.id,"into",o,"at portal",a,"because",s,"sourceportal",r),a===void 0)if(t.changeType==="level-select")i.state.position=S({x:1,y:1,z:8});else throw new Error(`trying to move ${i.id} from ${d.id} --to-> ${o} but no destination portal found to locate with`);else{i.state.position=m(a.state.position,a.config.relativePoint,p,s==="portal"&&r.config.direction.z>0?{z:J.h}:{});const{config:{direction:c}}=a;c.z===0&&(i.state.autoWalk=!0,i.state.facing=u(c,-1),i.state.action==="idle"&&(i.state.action="moving"),lt(i,c,e,l))}}const n=C(i,X(l.items));n.length>0&&console.warn("on entering room",o,"character",i.id,"at",i.state.position,"collides with",n),e.entryState[i.id]=_(i),i.id==="headOverHeels"?(delete e.entryState.head,delete e.entryState.heels):(e.entryState[w(i.id)]||(e.entryState[w(i.id)]=e.entryState.headOverHeels),delete e.entryState.headOverHeels),j.dispatch(tt(o))};export{at as a,B as b,pt as c,et as d,ot as f,M as m,it as o,st as r};
