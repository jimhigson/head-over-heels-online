name: Visual Regression

on:
  pull_request:
    branches: [main]

jobs:
  # since github has no way to require that all workflows that run must be successful other than marking them as required,
  # this breaks if the workflow is straight-up optional since gh will wait forever for it to complete. Instead, we make
  # this workflow always run, but exit quick if the paths that it governs haven't changed
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.filter.outputs.visual-regression-trigger-files }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: "shell"
          filters: |
            visual-regression-trigger-files:
              - 'src/**'
              - 'screenshotTests/**'
              - 'gfx/**'
              - 'pnpm-lock.yaml'
              - '.github/workflows/visual-regression.yml'

  build-game:
    needs: check-changes
    if: needs.check-changes.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache game build
        uses: actions/cache@v4
        id: game-build-cache
        with:
          path: dist/
          key: game-build-${{ runner.os }}-${{ hashFiles('src/**', 'gfx/**', 'pnpm-lock.yaml', 'vite.config.ts', 'tsconfig.json', 'tsconfig.app.json') }}

      - name: Install pnpm
        if: steps.game-build-cache.outputs.cache-hit != 'true'
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        if: steps.game-build-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "pnpm"

      - run: pnpm install
        if: steps.game-build-cache.outputs.cache-hit != 'true'

      - name: Build game
        if: steps.game-build-cache.outputs.cache-hit != 'true'
        run: pnpm build:game

  visual-tests:
    needs: [check-changes, build-game]
    if: needs.check-changes.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [22.x]
        test:
          - lutSnapshot
          - roomSnapshots
        browser:
          - chromium-desktop
          - webkit-desktop
          - mobile-chrome
          - mobile-safari
        include:
          - browser: chromium-desktop
            batch_count: 1
          - browser: webkit-desktop
            batch_count: 2
          - browser: mobile-chrome
            batch_count: 1
          - browser: mobile-safari
            batch_count: 2
    name: Visual tests - ${{ matrix.test }} - ${{ matrix.browser }}

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - run: pnpm install

      - name: Restore game build cache
        uses: actions/cache/restore@v4
        with:
          path: dist/
          key: game-build-${{ runner.os }}-${{ hashFiles('src/**', 'gfx/**', 'pnpm-lock.yaml', 'vite.config.ts', 'tsconfig.json', 'tsconfig.app.json') }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install Playwright browsers
        run: |
          if [[ "${{ matrix.browser }}" == *"chromium"* ]] || [[ "${{ matrix.browser }}" == *"chrome"* ]]; then
            pnpm playwright install chromium
          elif [[ "${{ matrix.browser }}" == *"firefox"* ]]; then
            pnpm playwright install firefox
          elif [[ "${{ matrix.browser }}" == *"webkit"* ]] || [[ "${{ matrix.browser }}" == *"safari"* ]]; then
            pnpm playwright install webkit
          fi
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Install Playwright system dependencies
        if: matrix.browser == 'webkit-desktop' || matrix.browser == 'mobile-safari' || matrix.browser == 'firefox-desktop'
        run: pnpm playwright install-deps

      - name: Run Playwright tests
        env:
          BATCH_COUNT: ${{ matrix.batch_count }}
        run: pnpm playwright test ${{ matrix.test }} --project=${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # finally, a job to pass if either the VR tests didn't run, or they ran and were successful:
  visual-regression-gate:
    name: "Visual Regression Gate"
    runs-on: ubuntu-latest
    needs: [check-changes, visual-tests]
    if: always()
    steps:
      - run: |
          if [[ "${{ needs.check-changes.outputs.should-run }}" != "true" ]]; then
            echo "Visual regression skipped - not required"
            exit 0
          elif [[ "${{ needs.visual-tests.result }}" == "success" ]]; then
            echo "Visual regression tests passed"
            exit 0
          else
            echo "Visual regression tests failed"
            exit 1
          fi
